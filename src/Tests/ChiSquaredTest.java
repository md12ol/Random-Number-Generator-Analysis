package Tests;

import static java.lang.Math.pow;

import Generators.RandomNumberGenerator;
import java.io.Writer;
import java.util.ArrayList;

/**
 * Implements a Chi-Squared randomness test on the desired random number generator.  The Chi-Squared
 * test determines if the list of numbers generated by a random number generator appropriately
 * represents what should be expected by a truly random number generator.  This is accomplished by
 * comparing the expected number of times a particular output is expected by the random number
 * generator and the observed number of times a particular output is generated. The procedure is
 * further explained within "Beautiful Testing Chapter 10.pdf."  One note, due to the nature of the
 * Chi-Squared test, the int test is hard-coded to the range of [0, 99] for potential values as this
 * impacts the degrees of freedom when getting the necessary Chi-Squared value.
 */
public class ChiSquaredTest implements Test {

  private Writer out;
  private int min;
  private int lessThan;
  private int numSamples;
  private RandomNumberGenerator generator;
  private double intChiResult;
  private boolean[] intResult;
  private double boolChiResult;
  private boolean[] boolResult;

  /**
   * Completes a Chi-Squared test on gen with samples number of samples where each sample represents
   * a number in the range [min, lessThan).  The results of the test are placed in output.
   *
   * @param output where to place the test results
   * @param min minimum value for int test (inclusive)
   * @param lessThan maximum value for int test (exclusive)
   * @param samples number of samples for the test
   * @param gen random number generator being tested
   * @throws IllegalArgumentException if samples is less than 1
   */
  private ChiSquaredTest(Writer output, int min, int lessThan, int samples, RandomNumberGenerator
      gen) throws IllegalArgumentException {
    if (samples < 1) {
      throw new IllegalArgumentException("The number of samples cannot be less than 1.");
    }
    out = output;
    this.min = min;
    this.lessThan = lessThan;
    numSamples = samples;
    generator = gen;
    intResult = new boolean[5];
    boolResult = new boolean[5];
    Test.println("Chi-Squared Test Results for " + gen.getClass().getName(), out);
    Test.println("Number of samples: " + numSamples, out);

    boolTest();
    printBoolResults();

    if (lessThan - min > 2) { // More than 2 possible values
      intTest();
      printIntResults();
    } else {
      Test.println("Integer test not run as number of possible values was less than 3", out);
      Test.println("Min: " + min + "\tMax: " + (lessThan - 1), out);
    }
    Test.println("", out);
  } // ChiSquaredTest

  /**
   * Complete a Chi-Squared randomness test on gen and outputs the results to output.
   *
   * @param output where to place the test results
   * @param gen random number generator being tested
   */
  public ChiSquaredTest(Writer output, RandomNumberGenerator gen) {
    this(output, 0, 100, 1000000, gen);
  } // ChiSquaredTest

  /**
   * Facilitates running the Chi-Squared randomness test on gen once where minimized output will be
   * sent to output if print is set to true.
   *
   * @param output where to place the results
   * @param gen random number generator being tested
   * @param print whether or not output should print
   * @throws IllegalArgumentException if runs is less than 1
   */
  public ChiSquaredTest(Writer output, RandomNumberGenerator gen, boolean print) throws
      IllegalArgumentException {
    out = output;
    min = 0;
    lessThan = 100;
    numSamples = 1000000;
    generator = gen;
    intResult = new boolean[5];
    boolResult = new boolean[5];
    boolTest();
    intTest();
    int boolPassed = 0;
    for (boolean b : boolResult) {
      if (b) {
        boolPassed++;
      }
    }
    int intPassed = 0;
    for (boolean b : intResult) {
      if (b) {
        intPassed++;
      }
    }
    if (print) {
      Test.println(boolChiResult + "\t" + boolPassed + "\t" + intChiResult + "\t" +
          intPassed, out);
    }
  } // ChiSquaredTest

  /**
   * Determines what the overall observed error is according to the equation explained in "Beautiful
   * Testing Chapter 10.pdf."  The equation: Error = SUM(for all possible outputs o) [(o_observed -
   * o_expected)^2 / o_expected]
   *
   * @param results the observed frequencies for all possible outputs
   * @return the above sum
   */
  private double calcChiSquared(int[] results) {
    int numCells = results.length;
    int expected = numSamples / numCells;
    double chiSum = 0.0;
    for (int r : results) {
      chiSum += pow(r - expected, 2) / expected;
    }
    return chiSum;
  }

  @Override
  public void boolTest() {
    ArrayList<Boolean> boolList = generator.booleanList(numSamples);
    int[] count = new int[2];
    for (Boolean bool : boolList) {
      if (bool) {
        count[1]++;
      } else {
        count[0]++;
      }
    }
    boolChiResult = calcChiSquared(count);
    boolResult[0] = boolChiResult < 0.00393; // a = 95%
    boolResult[1] = boolChiResult < 0.0158; // a = 90%
    boolResult[2] = boolChiResult < 0.102; // a = 75%
    boolResult[3] = boolChiResult < 0.455; // a = 50%
    boolResult[4] = boolChiResult < 1.323; // a = 25%
  }

  @Override
  public void intTest() {
    ArrayList<Integer> intList = generator.intList(min, lessThan, numSamples);
    int[] count = new int[lessThan - min];
    for (int num : intList) {
      count[num - min]++;
    }
    intChiResult = calcChiSquared(count);
    intResult[0] = intChiResult < 77.046; // a = 95%
    intResult[1] = intChiResult < 81.449; // a = 90%
    intResult[2] = intChiResult < 89.181; // a = 75%
    intResult[3] = intChiResult < 98.334; // a = 50%
    intResult[4] = intChiResult < 108.09; // a = 25%
  }

  @Override
  public void printBoolResults() {
    Test.println("Boolean Chi-Squared Value: " + boolChiResult, out);
    Test.println("Passes Chi-Squared test with 95% CI: " + boolResult[0], out);
    Test.println("Passes Chi-Squared test with 90% CI: " + boolResult[1], out);
    Test.println("Passes Chi-Squared test with 75% CI: " + boolResult[2], out);
    Test.println("Passes Chi-Squared test with 50% CI: " + boolResult[3], out);
    Test.println("Passes Chi-Squared test with 25% CI: " + boolResult[4], out);
  }

  @Override
  public void printIntResults() {
    Test.println("Integer Chi-Squared Value: " + intChiResult, out);
    Test.println("Passes Chi-Squared test with 95% CI: " + intResult[0], out);
    Test.println("Passes Chi-Squared test with 90% CI: " + intResult[1], out);
    Test.println("Passes Chi-Squared test with 75% CI: " + intResult[2], out);
    Test.println("Passes Chi-Squared test with 50% CI: " + intResult[3], out);
    Test.println("Passes Chi-Squared test with 25% CI: " + intResult[4], out);
  }
}
